;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;; Simple Python Completion Source for Auto-Complete
;;;;; =================================================
;;;;;
;;;;; This file provides a completion source for Auto-Complete:
;;;;; http://www.emacswiki.org/emacs/AutoComplete
;;;;;
;;;;; Installation
;;;;; ------------
;;;;; 
;;;;; Setup Auto-Complete in the usual fashion, and make sure it gets loaded for
;;;;; python buffers. Then, place this file in your load-path, and add
;;;;; 
;;;;;     (require 'ac-python)
;;;;; 
;;;;; to your .emacs file (after loading Auto-Complete).
;;;;; 
;;;;; Usage
;;;;; -----
;;;;; 
;;;;; Python symbols will be completed by Auto-Complete, once Emacs learns about
;;;;; these symbols. This is the short-coming of the plugin, but it's a small
;;;;; price to pay.
;;;;; 
;;;;; To teach Emacs about symbols in imported modules, Emacs needs to execute
;;;;; the Python source. This can be accomplished with `python-send-buffer` for
;;;;; example, often bound to `C-c C-c`. If a python process is already running,
;;;;; this is essentially instantaneous.
;;;;;
;;;;; ---
;;;;;
;;;;; Version: 20110519
;;;;; License: MIT
;;;;; Author: Chris Poole <chris@chrispoole.com>
;;;;; More information: http://chrispoole.com/project/ac-python
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;; Modified by Samuel Sinayoko 2012-04-12 Defines
;; - ipython completion
;; `ac-python-symbol-completions' based on `ipython-complete' from
;; `ipython.el'. `ac-python-completion-at-point' now uses
;; `ac-python-symbol-completions' instead of `python-symbol-completion'.
;; The latter is defined in `python.el' which we dont' use, since
;; `ipython.el' is based on `python-mode.el'. 

;; - documentation
;; attempt to define documentation in `ac-python-symbol-documentation'

;; Tested with on 14 April 2012 with
;; - EPD 7.2-2 64bit Linux (ipython 0.12)
;; - Ubuntu 10.0.4
;; - ipython.el development version from github as of 
;; https://github.com/ipython/ipython/blob/master/docs/emacs/ipython.el
;; - python-mode.el dev version from launpad
;; https://code.launchpad.net/python-mode





(defun ac-python-symbol-completions (&optional done)
  "Complete the python symbol before point.

If no completion available, insert a TAB.
Returns the completed symbol, a string, if successful, nil otherwise.

Bug: if no IPython-shell is running, fails first time due to header returned, which messes up the result. Please repeat once then. "
  (interactive "*")
  (let* (py-split-windows-on-execute-p
         py-shell-switch-buffers-on-execute-p
         (beg (progn (save-excursion (skip-chars-backward "a-z0-9A-Z_." (point-at-bol))
                                     (point))))
         (end (point))
         (pattern (buffer-substring-no-properties beg end))
         (sep ";")
         (python-process (or (get-buffer-process (current-buffer))
			     (get-buffer-process "*IPython*")
                             (get-buffer-process (py-shell nil nil "ipython" 'noswitch nil))))

         (comint-output-filter-functions
          (delq 'py-comint-output-filter-function comint-output-filter-functions))
         (comint-output-filter-functions
          (append comint-output-filter-functions
                  '(ansi-color-filter-apply
                    (lambda (string)
                      (setq ugly-return (concat ugly-return string))
                      (delete-region comint-last-output-start
                                     (process-mark (get-buffer-process (current-buffer))))))))
         completion completions completion-table ugly-return)
    (if (string= pattern "")
        (tab-to-tab-stop)
      (process-send-string python-process
                           (format (py-set-ipython-completion-command-string (downcase (process-name python-process))) pattern))
      (accept-process-output python-process 1)
      (split-string (substring ugly-return 0 (position ?\n ugly-return)) sep))))


(defun ac-python-ipython-cleanup ()
  "Remove empty lines generated by autocomplete in *Python* buffer"
  (interactive))
  ;; (let (python-process (get-process py-which-bufname))
  ;;   (with-current-buffer "*Python*"
  ;;     (undo))))

;; (defun ac-python-symbol-completions (pattern)
;;     "Try to complete the python symbol before point. Only knows about the stuff
;; in the current *Python* session."
;;     (interactive)
;;     (with-current-buffer "*Python*"
;;       (save-excursion
;; 	(let* (completions
;; 	       (ugly-return nil)
;; 	       (sep ";")
;; 	       (python-process (or (get-buffer-process (current-buffer))
;;                                         ;XXX hack for .py buffers
;; 				   (get-process py-which-bufname)))
;; 	       (comint-preoutput-filter-functions
;; 		(append comint-preoutput-filter-functions
;; 			'(ansi-color-filter-apply
;; 			  (lambda (string)
;; 			    (setq ugly-return (concat ugly-return string))
;; 			    (with-current-buffer "*Python*"
;; 			      (delete-region comint-last-input-start (process-mark python-process)))
;; 			    "")))))
;; 	  (process-send-string python-process
;; 			       (format ipython-completion-command-string pattern))
;; 	  (accept-process-output python-process 2)
;; 	  (ac-python-ipython-cleanup)
;; 	  (split-string (substring ugly-return 0 (position ?\n ugly-return)) sep)))))

(defun ac-python-symbol-documentation (symbol)
  "Return documentation for a given symbol"
    (interactive)
    ;"test")

    (defun first-few-lines (string)
      "return 2 times the first `ac-menu-height' lines"
      (with-temp-buffer 
      ;(with-current-buffer "*TEST*"
      	(insert-string string)
      	(goto-char (point-min))
      	(goto-line (+ 1 ac-menu-height))
	(end-of-line)
      	(substring (buffer-string) 0 (point))))

    (defun first-row (string)
      "return 2 times the first `ac-menu-height' lines"
      (with-temp-buffer 
      ;(with-current-buffer "*TEST*"
      	(insert-string string)
      	(goto-char (point-min))
	(end-of-line)
	(delete-region (point) (point-max))
	(buffer-string)))
    
    (defun proper-doc-p (string)
      (string))
    ;(> (length string) 5))
      ;;(string-match "Type:" string))

    (let*(help-string
	  (python-process (or (get-buffer-process (current-buffer))
			     (get-buffer-process "*IPython*")
                             (get-buffer-process (py-shell nil nil "ipython" 'noswitch nil))))
	   ;; (comint-output-filter-functions
	   ;;  (delq 'py-comint-output-filter-function comint-output-filter-functions))
	   (comint-output-filter-functions
	    (append comint-output-filter-functions
    		    '((lambda (string)
			(when (proper-doc-p string)
			  (setq help-string (ansi-color-filter-apply string)))
			;; (with-current-buffer "*IPython*"
			;;   (undo 2))
			(delete-region comint-last-output-start (process-mark python-process))))))
			  ;;(message "help-string = %s" help-string))
	    ;;""))))
	   ;;(ipython-help-command-string "_ip.magic('pinfo %s') \n")) ;; ipython < 0.12
	   (ipython-help-command-string "%%pdef %s \n")) ;; ipython < 0.12
      (process-send-string python-process
    			   (format ipython-help-command-string symbol))
      (accept-process-output python-process 1)
      (ac-python-ipython-cleanup)
      ;help-string))
      ;;(first-few-lines help-string)))
      (first-row help-string)))

(defun ac-get-python-symbol-at-point ()
  "Return python symbol at point.

Assumes symbol can be alphanumeric, `.' or `_'."
  (let ((end (point))
        (start (ac-python-start-of-expression)))
    (buffer-substring-no-properties start end)))

(defun ac-python-completion-at-point ()
  "Returns a possibly empty list of completions for the symbol at
point."
  (ac-python-symbol-completions))
  ;(ac-python-symbol-completions (ac-get-python-symbol-at-point)))

(defun ac-python-start-of-expression ()
  "Return point of the start of python expression at point.

Assumes symbol can be alphanumeric, `.' or `_'."
  (save-excursion
    (and (re-search-backward
          (rx (or buffer-start (regexp "[^[:alnum:]._]"))
              (group (1+ (regexp "[[:alnum:]._]"))) point)
          nil t)
         (match-beginning 1))))

(defvar ac-source-python
  '((candidates . ac-python-completion-at-point)
    (document . ac-python-symbol-documentation)
    (prefix . ac-python-start-of-expression)
    (symbol . "f")
    (requires . 2))
  "Source for python completion.")

(add-hook 'python-mode-hook (lambda () (add-to-list 'ac-sources 'ac-source-python)))

(provide 'ac-python)